plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'site.sharetable'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'io.jsonwebtoken:jjwt:0.9.1' // JWT 라이브러리
	implementation 'com.google.code.gson:gson:2.11.0'
	implementation 'org.bouncycastle:bcprov-jdk18on:1.79'

	// queryDsl 설정 ↓↓↓
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	// queryDsl 설정 ↑↑↑

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
//	testAndDevelopmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def activeProfile = System.getenv("SPRING_PROFILES_ACTIVE") ?: "local"

processResources {
	println "--------------"
	println System.getenv("DATABASE_USERNAME").length()

	filesMatching("**/application.yaml") {
		expand(SPRING_PROFILES_ACTIVE: activeProfile)
	}

	filesMatching("**/application-${activeProfile}.yaml") {
		expand([
				DATABASE_URL: System.getenv("DATABASE_URL"),
				DATABASE_USERNAME: System.getenv("DATABASE_USERNAME"),
				DATABASE_PASSWORD: System.getenv("DATABASE_PASSWORD")
		])
	}
}

// queryDsl 설정 ↓↓↓
def querydslDir = "src/main/generated"
sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}
// queryDsl 설정 ↑↑↑

tasks.named('test') {
	useJUnitPlatform()
}
